Một số emirp là một số nguyên tố mà khi đảo ngược vị trí các chữ số của nó, ta
cũng được một số nguyên tố. Viết chương trình liệt kê các số emirp nhỏ hơn N với N
nhập vào từ bàn phím.


#include <stdio.h>
#include <math.h>

// Hàm kiểm tra một số có phải là số nguyên tố hay không
int is_prime(int num) {
    if (num <= 1) return 0; // Số nhỏ hơn hoặc bằng 1 không phải là số nguyên tố
    if (num == 2) return 1; // Số 2 là số nguyên tố
    if (num % 2 == 0) return 0; // Các số chẵn lớn hơn 2 không phải là số nguyên tố
    for (int i = 3; i <= sqrt(num); i += 2) { // Kiểm tra các số lẻ từ 3 trở lên
        if (num % i == 0) return 0; // Nếu num chia hết cho i thì không phải là số nguyên tố
    }
    return 1; // num là số nguyên tố
}

// Hàm đảo ngược các chữ số của một số
int reverse_number(int num) {
    int reversed = 0;
    while (num != 0) {
        reversed = reversed * 10 + num % 10;
        num /= 10;
    }
    return reversed;
}

// Hàm kiểm tra một số có phải là số emirp hay không
int is_emirp(int num) {
    if (!is_prime(num)) return 0; // Nếu num không phải là số nguyên tố thì không phải là số emirp
    int reversed = reverse_number(num);
    if (reversed != num && is_prime(reversed)) return 1; // Nếu số đảo ngược là số nguyên tố và khác num
    return 0;
}

// Hàm liệt kê các số emirp nhỏ hơn N
void list_emirp_numbers(int N) {
    for (int i = 2; i < N; i++) {
        if (is_emirp(i)) {
            printf("%d\n", i);
        }
    }
}

int main() {
    int N;
    
    // Nhập giá trị của N từ bàn phím
    printf("Nhập một số nguyên dương N: ");
    scanf("%d", &N);
    
    // Liệt kê các số emirp nhỏ hơn N
    printf("Các số emirp nhỏ hơn %d là:\n", N);
    list_emirp_numbers(N);
    
    return 0;
}
