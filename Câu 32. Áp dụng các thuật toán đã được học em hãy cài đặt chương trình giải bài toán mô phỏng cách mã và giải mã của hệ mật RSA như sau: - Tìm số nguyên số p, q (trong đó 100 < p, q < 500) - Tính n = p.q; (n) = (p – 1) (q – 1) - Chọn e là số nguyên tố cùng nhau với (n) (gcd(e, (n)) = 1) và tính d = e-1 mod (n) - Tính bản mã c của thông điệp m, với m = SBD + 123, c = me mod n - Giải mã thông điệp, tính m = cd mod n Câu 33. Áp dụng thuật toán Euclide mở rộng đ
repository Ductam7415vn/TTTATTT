Áp dụng các thuật toán đã được học em hãy cài đặt chương trình giải bài toán
mô phỏng cách mã và giải mã của hệ mật RSA như sau:
- Tìm số nguyên số p, q (trong đó 100 < p, q < 500)
- Tính n = p.q; (n) = (p – 1) (q – 1)
- Chọn e là số nguyên tố cùng nhau với (n) (gcd(e, (n)) = 1) và tính d = e-1 mod
(n)
- Tính bản mã c của thông điệp m, với m = SBD + 123, c = me mod n
- Giải mã thông điệp, tính m = cd mod n
Câu 33. Áp dụng thuật toán Euclide mở rộng đ


#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define MIN_P 100
#define MAX_Q 500

// Kiểm tra số nguyên tố
int is_prime(int n) {
    if (n < 2) return 0;
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) return 0;
    }
    return 1;
}

// Thuật toán Euclid mở rộng để tính ước số chung lớn nhất
int extended_euclid(int e, int en) {
    int a = e, b = en, R;
    while (b > 0) {
        R = a % b;
        a = b;
        b = R;
    }
    return a;
}

// Thuật toán Euclid mở rộng để tính modular inverse
int modular_inverse(int e, int en) {
    int q, r, x, y, x1 = 0, x2 = 1, y1 = 1, y2 = 0;
    while (e > 0) {
        q = en / e;
        r = en % e;
        x = x2 - x1 * q;
        y = y2 - y1 * q;
        en = e;
        e = r;
        x2 = x1;
        y2 = y1;
        x1 = x;
        y1 = y;
    }
    return y2;
}

// Hàm main
int main() {
    int p, q, n, en, e, m;
    printf("Nhap p > 100: ");
    scanf("%d", &p);

    while (p <= MIN_P || !is_prime(p)) {
        printf("Nhap lai snt p > 100: ");
        scanf("%d", &p);
    }

    printf("Nhap snt q < 500: ");
    scanf("%d", &q);

    while (q >= MAX_Q || !is_prime(q)) {
        printf("Nhap lai snt q < 500: ");
        scanf("%d", &q);
    }

    n = p * q;
    en = (p - 1) * (q - 1);
    printf("\ne(n) = %d", en);

    printf("\nNhap 1 < e < e(n), nguyen to cung nhau voi e(n): ");
    scanf("%d", &e);

    while (e <= 1 || e >= en || extended_euclid(e, en) != 1) {
        printf("\nnhap lai 1 < e < e(n), nguyen to cung nhau voi e(n): ");
        scanf("%d", &e);
    }

    printf("\nd = %d\n", modular_inverse(e, en));

    printf("Nhap SBD: ");
    scanf("%d", &m);
    m = m + 123;
    printf("Thong diep m = SBD + 123 = %d\n", m);

    int b = 1;
    int a = m;
    int K[50], j = 0, i;

    // Tính a^e mod n
    int k = e;
    while (k > 0) {
        K[j] = k % 2;
        k = (k - K[j]) / 2;
        j++;
    }

    if (K[0] == 1) b = a;
    for (i = 0; i < j; i++) {
        a = (a * a) % n;
        if (K[i] == 1) {
            b = (a * b) % n;
        }
    }

    printf("\nBan ma c cua thong diep %d la: %d\n", m, b);

    // Tính b^d mod n
    int d = modular_inverse(e, en);
    a = b;
    b = 1;
    j = 0;

    k = d;
    while (k > 0) {
        K[j] = k % 2;
        k = (k - K[j]) / 2;
        j++;
    }

    if (K[0] == 1) b = a;
    for (i = 0; i < j; i++) {
        a = (a * a) % n;
        if (K[i] == 1) {
            b = (a * b) % n;
        }
    }

    printf("Giai mai thong diep la: %d\n", b);

    return 0;
}
