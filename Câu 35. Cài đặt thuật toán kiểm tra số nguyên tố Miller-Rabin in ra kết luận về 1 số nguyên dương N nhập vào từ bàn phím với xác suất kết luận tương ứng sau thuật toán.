Câu 35. Cài đặt thuật toán kiểm tra số nguyên tố Miller-Rabin in ra kết luận về 1 số
nguyên dương N nhập vào từ bàn phím với xác suất kết luận tương ứng sau thuật toán.


#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

// Hàm kiểm tra số nguyên tố Miller-Rabin
int isPrimeMillerRabin(int n, int t);

// Hàm tính a^b mod m bằng phương pháp nhanh chóng
int modularExponentiation(int a, int b, int m);

// Hàm chọn số ngẫu nhiên trong phạm vi từ lower đến upper (bao gồm cả lower và upper)
int randomInRange(int lower, int upper);

int main() {
    int n, t;

    printf("Nhap N: ");
    scanf("%d", &n);

    if (n <= 1) {
        printf("%d khong phai la so nguyen to.\n", n);
        return 0;
    }

    printf("Nhap so lan lap t: ");
    scanf("%d", &t);

    if (isPrimeMillerRabin(n, t)) {
        printf("%d co xac suat cao la so nguyen to.\n", n);
    } else {
        printf("%d khong phai la so nguyen to.\n", n);
    }

    return 0;
}

// Hàm kiểm tra số nguyên tố Miller-Rabin
int isPrimeMillerRabin(int n, int t) {
    if (n <= 1) return 0; // Nếu n là 1 hoặc nhỏ hơn, không phải là số nguyên tố

    if (n <= 3) return 1; // Nếu n là 2 hoặc 3, là số nguyên tố

    if (n % 2 == 0) return 0; // Nếu n chia hết cho 2 (ngoài trường hợp 2), không phải là số nguyên tố

    // Tìm s và r sao cho n - 1 = r * 2^s
    int r = n - 1;
    int s = 0;
    while (r % 2 == 0) {
        r /= 2;
        s++;
    }

    // Lặp t lần để kiểm tra
    for (int i = 0; i < t; i++) {
        // Chọn số ngẫu nhiên a từ 2 đến n-2
        int a = randomInRange(2, n - 2);
        // Tính y = a^r % n
        int y = modularExponentiation(a, r, n);

        if (y != 1 && y != n - 1) {
            int j = 1;
            while (j < s && y != n - 1) {
                y = modularExponentiation(y, 2, n);
                if (y == 1) return 0; // Nếu y = 1, là số hợp
                j++;
            }
            if (y != n - 1) return 0; // Nếu y != n-1, là số hợp
        }
    }

    return 1; // Nếu không phát hiện là số hợp trong t lần lặp, n có xác suất cao là số nguyên tố
}

// Hàm tính a^b mod m bằng phương pháp nhanh chóng
int modularExponentiation(int a, int b, int m) {
    int result = 1;
    a = a % m;
    while (b > 0) {
        if (b % 2 == 1) {
            result = (result * a) % m;
        }
        b = b >> 1; // b = b / 2
        a = (a * a) % m;
    }
    return result;
}

// Hàm chọn số ngẫu nhiên trong phạm vi từ lower đến upper (bao gồm cả lower và upper)
int randomInRange(int lower, int upper) {
    return lower + rand() % (upper - lower + 1);
}
