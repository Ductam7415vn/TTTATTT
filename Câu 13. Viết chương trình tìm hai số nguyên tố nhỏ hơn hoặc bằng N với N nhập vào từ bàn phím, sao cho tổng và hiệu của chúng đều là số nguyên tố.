Viết chương trình tìm hai số nguyên tố nhỏ hơn hoặc bằng N với N nhập vào từ
bàn phím, sao cho tổng và hiệu của chúng đều là số nguyên tố.

* Note : 1 không phải là số nguyên tố 

#include <stdio.h>
#include <stdlib.h> 
#include <math.h>

// Hàm kiểm tra xem một số có phải là số nguyên tố hay không
int is_prime(int num) {
    if (num <= 1) return 0; // Số nhỏ hơn hoặc bằng 1 không phải số nguyên tố
    if (num == 2) return 1; // 2 là số nguyên tố
    if (num % 2 == 0) return 0; // Các số chẵn lớn hơn 2 không phải số nguyên tố
    for (int i = 3; i <= sqrt(num); i += 2) {
        if (num % i == 0) return 0; // Nếu có ước số khác 1 và chính nó thì không phải số nguyên tố
    }
    return 1; // Các trường hợp còn lại là số nguyên tố
}

// Hàm tìm và in ra hai số nguyên tố nhỏ hơn hoặc bằng N sao cho tổng và hiệu của chúng đều là số nguyên tố
void find_two_primes(int N) {
    int prime1, prime2;
    
    // Duyệt qua các cặp số nguyên tố (i, j)
    for (int i = 2; i <= N; ++i) {
        for (int j = 2; j <= N; ++j) {
            if (is_prime(i) && is_prime(j)) {
                int sum = i + j;
                int diff = abs(i - j);
                // Kiểm tra tổng và hiệu của hai số là số nguyên tố và nhỏ hơn hoặc bằng N
                if (is_prime(sum) && is_prime(diff) && sum <= N && diff <= N) {
                    prime1 = i;
                    prime2 = j;
                    printf("Hai so nguyen to can tim la: %d va %d\n", prime1, prime2);
                    return;
                }
            }
        }
    }
    printf("Khong tim thay hai so nguyen to thoa man dieu kien.\n");
}

int main() {
    int N;
    printf("Nhap so N: ");
    scanf("%d", &N);

    // Gọi hàm để tìm và in ra hai số nguyên tố nhỏ hơn hoặc bằng N sao cho tổng và hiệu của chúng đều là số nguyên tố
    find_two_primes(N);

    return 0;
}
