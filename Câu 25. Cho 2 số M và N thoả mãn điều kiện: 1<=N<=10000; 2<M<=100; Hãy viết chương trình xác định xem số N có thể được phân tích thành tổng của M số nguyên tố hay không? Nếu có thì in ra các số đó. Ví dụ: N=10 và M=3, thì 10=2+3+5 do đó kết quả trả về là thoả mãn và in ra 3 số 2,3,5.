Cho 2 số M và N thoả mãn điều kiện: 1<=N<=10000; 2<M<=100; Hãy viết chương
trình xác định xem số N có thể được phân tích thành tổng của M số nguyên tố hay không? Nếu
có thì in ra các số đó.
Ví dụ: N=10 và M=3, thì 10=2+3+5 do đó kết quả trả về là thoả mãn và in ra 3 số 2,3,5.

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Hàm kiểm tra xem một số có phải là số nguyên tố hay không
bool is_prime(int number) {
    if (number < 2) return false;
    for (int i = 2; i * i <= number; i++) {
        if (number % i == 0) return false;
    }
    return true;
}

// Hàm tìm tổ hợp M số nguyên tố có tổng bằng N
bool find_combination(int primes[], int prime_count, int N, int M, int start, int combination[], int current_length, int current_sum) {
    if (current_length == M) {
        return current_sum == N; // Đã tìm thấy tổ hợp
    }
    if (current_sum > N || current_length > M) {
        return false; // Vượt quá tổng hoặc số lượng phần tử
    }

    for (int i = start; i < prime_count; i++) {
        combination[current_length] = primes[i];
        if (find_combination(primes, prime_count, N, M, i + 1, combination, current_length + 1, current_sum + primes[i])) {
            return true;
        }
    }
    return false;
}

int main() {
    int N, M;
    printf("Nhap N (1 <= N <= 10000): ");
    scanf("%d", &N);
    printf("Nhap M (2 <= M <= 100): ");
    scanf("%d", &M);

    if (N < 1 || N > 10000 || M < 2 || M > 100) {
        printf("Gia tri N hoac M khong hop le!\n");
        return 1;
    }

    // Tạo danh sách các số nguyên tố nhỏ hơn hoặc bằng N
    int primes[10000];
    int prime_count = 0;
    for (int i = 2; i <= N; i++) {
        if (is_prime(i)) {
            primes[prime_count++] = i;
        }
    }

    int combination[M];
    if (find_combination(primes, prime_count, N, M, 0, combination, 0, 0)) {
        printf("Tim thay to hop: ");
        for (int i = 0; i < M; i++) {
            printf("%d ", combination[i]);
        }
        printf("\n");
    } else {
        printf("Khong tim thay to hop phu hop\n");
    }

    return 0;
}
