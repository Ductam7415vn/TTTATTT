Lập trình tìm kiếm xâu S1 trong xâu S2 theo thuật toán Knutt-Morris-Patt. Trong trường
hợp nào thì thuật toán Boyer-Moore được xem là cải tiến hơn thuật toán tìm kiếm vét cạn?


#include <stdio.h>
#include <string.h>

// So sánh hai chuỗi con để kiểm tra sự bằng nhau
int soSanhChuoi(char p[], int j, int i) {
    int check = 0;
    for (int k = 0; k < i; k++) {
        if (p[k] == p[j - i + k]) {
            check++;
        }
    }
    return (check == i) ? 1 : 0;
}

// Kiểm tra tiền tố dài nhất cũng là hậu tố
int kiemTra(char p[], int j) {
    for (int i = j - 1; i >= 1; i--) {
        if (soSanhChuoi(p, j, i) == 1) {
            return i;
        }
    }
    return 0;
}

// Xây dựng hàm thất bại (failure function)
void failureFunction(char p[], int f[]) {
    f[0] = -1;
    f[1] = 0;
    for (int j = 2; j < strlen(p); j++) {
        f[j] = kiemTra(p, j);
    }
}

// Xử lý văn bản để tìm chuỗi con
int xuLy(char t[], char p[], int f[]) {
    int i = 0, j = 0, check = 0, sopheptinhlap = 0;
    int lenT = strlen(t);
    int lenP = strlen(p);

    while (i < lenT - lenP) {
        int checkp = j, k = i + j;
        while (checkp != lenP) {
            if (t[k] == p[j]) {
                k++;
                j++;
                checkp++;
                sopheptinhlap++;
            } else {
                i = i + j - f[j];
                j = (f[j] == -1) ? 0 : f[j];
                sopheptinhlap++;
                break;
            }
        }
        if (checkp == lenP) {
            printf("\nKQ: Vi tri %d", i);
            check = 1;
            j = 0;
            i = i + lenP;
        }
    }

    if (check == 0) {
        printf("\nKQ: Khong co chuoi can tim");
    }

    return sopheptinhlap;
}

int main() {
    char t[5000], p[100];
    printf("Nhap doan van ban T: ");
    fgets(t, sizeof(t), stdin); // Dùng fgets thay vì gets để tránh tràn bộ đệm
    printf("Nhap chuoi P can tim: ");
    fgets(p, sizeof(p), stdin); // Dùng fgets thay vì gets để tránh tràn bộ đệm

    // Loại bỏ ký tự xuống dòng do fgets thêm vào
    t[strcspn(t, "\n")] = '\0';
    p[strcspn(p, "\n")] = '\0';

    int f[strlen(p)];
    failureFunction(p, f);
    int sopheptinhlap = xuLy(t, p, f);
    printf("\nSo phep tinh lap la: %d", sopheptinhlap);

    return 0;
}
