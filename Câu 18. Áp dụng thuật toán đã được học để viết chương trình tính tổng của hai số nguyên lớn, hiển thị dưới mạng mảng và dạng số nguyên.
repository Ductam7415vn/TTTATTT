Áp dụng thuật toán đã được học để viết chương trình tính tổng của hai số nguyên
lớn, hiển thị dưới mạng mảng và dạng số nguyên.

* Note: Bản window 

#include <stdio.h>
#include <math.h>
#include <windows.h>

// Hàm chuyển đổi số nguyên thành mảng bit
void convert_to_bit_array(int number, int *array, int size, int w) {
    for (int i = size - 1; i >= 0; i--) {
        array[i] = number / pow(2, i * w);
        number -= array[i] * pow(2, i * w);
    }
}

// Hàm in mảng
void print_array(const char *name, int *array, int size) {
    printf("\n %s = [", name);
    for (int i = size - 1; i >= 0; i--) {
        printf("%d ", array[i]);
    }
    printf("]");
}

int main() {
    int p = 2147483647; // p là giá trị lớn nhất của một số nguyên dương 32-bit.
    int w = 8; // w là số bit cho mỗi phần tử trong mảng (ở đây là 8 bit).
    int t = (int)((log2(p) + 0.5) / w + 0.5); // t là số lượng phần tử trong mảng cần thiết để biểu diễn số nguyên.

    while (1) {
        int a, b;
        printf("\nNhap a: ");
        scanf("%d", &a);
        printf("\nNhap b: ");
        scanf("%d", &b);

        int A[t], B[t];
        convert_to_bit_array(a, A, t, w);
        convert_to_bit_array(b, B, t, w);

        print_array("A", A, t);
        print_array("B", B, t);

        int e = 0, C[t];
        for (int i = 0; i < t; i++) {
            C[i] = (A[i] + B[i] + e) % (int)pow(2, w);
            e = (A[i] + B[i] + e) >= pow(2, w) ? 1 : 0;
        }
        //Biến e là phần dư (carry) từ phép cộng.
        //C[i] là giá trị bit tại vị trí i sau khi cộng hai số nguyên và phần dư.
        //Tính tổng của A[i], B[i], và e rồi lấy phần dư modulo 2^w.

        printf("\nTong = (%d,[", e);
        for (int i = t - 1; i >= 0; i--) {
            printf("%d ", C[i]);
        }
        printf("])");

        int z;
        printf("\n------------------------------------------\nLam lai? YES: 1     NO: 0\nBan chon: ");
        scanf("%d", &z);
        if (z != 1) {
            break;
        }

        system("cls");
    }

    return 0;
}

bản macOS

#include <stdio.h>
#include <math.h>

// Hàm chuyển đổi số nguyên thành mảng bit
void convert_to_bit_array(int number, int *array, int size, int w) {
    for (int i = size - 1; i >= 0; i--) {
        array[i] = number / pow(2, i * w);
        number -= array[i] * pow(2, i * w);
    }
}

// Hàm in mảng
void print_array(const char *name, int *array, int size) {
    printf("\n %s = [", name);
    for (int i = size - 1; i >= 0; i--) {
        printf("%d ", array[i]);
    }
    printf("]");
}

void clearScreen() {
    printf("\033[2J\033[H"); // ANSI escape sequence to clear screen
}

int main() {
    int p = 2147483647; // p là giá trị lớn nhất của một số nguyên dương 32-bit.
    int w = 8; // w là số bit cho mỗi phần tử trong mảng (ở đây là 8 bit).
    int t = (int)((log2(p) + 0.5) / w + 0.5); // t là số lượng phần tử trong mảng cần thiết để biểu diễn số nguyên.

    while (1) {
        int a, b;
        printf("\nNhap a: ");
        scanf("%d", &a);
        printf("\nNhap b: ");
        scanf("%d", &b);

        int A[t], B[t];
        convert_to_bit_array(a, A, t, w);
        convert_to_bit_array(b, B, t, w);

        print_array("A", A, t);
        print_array("B", B, t);

        int e = 0, C[t];
        for (int i = 0; i < t; i++) {
            C[i] = (A[i] + B[i] + e) % (int)pow(2, w);
            e = (A[i] + B[i] + e) >= pow(2, w) ? 1 : 0;
        }
        //Biến e là phần dư (carry) từ phép cộng.
        //C[i] là giá trị bit tại vị trí i sau khi cộng hai số nguyên và phần dư.
        //Tính tổng của A[i], B[i], và e rồi lấy phần dư modulo 2^w.

        printf("\nTong = (%d,[", e);
        for (int i = t - 1; i >= 0; i--) {
            printf("%d ", C[i]);
        }
        printf("])");

        int z;
        printf("\n------------------------------------------\nLam lai? YES: 1     NO: 0\nBan chon: ");
        scanf("%d", &z);
        if (z != 1) {
            break;
        }

        clearScreen();
    }

    return 0;
}
