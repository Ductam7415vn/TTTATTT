Câu 34. Cài đặt thuật toán kiểm tra số nguyên tố Fermat. Trong trường hợp nào thì số
nào thì thuật toán cho kết quả kiểm tra sai.


#include <stdio.h>
#include <stdlib.h>

// Hàm tính lũy thừa modulo
int modular_exponentiation(int base, int exp, int mod) {
    int result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

// Hàm kiểm tra số nguyên tố sử dụng thuật toán Fermat
int fermat_primality_test(int n, int k) {
    if (n <= 1 || n == 4) return 0; // Hợp số
    if (n <= 3) return 1; // Nguyên tố
    
    // Kiểm tra k lần
    for (int i = 0; i < k; i++) {
        int a = 2 + rand() % (n - 4); // Chọn ngẫu nhiên a trong khoảng [2, n-2]
        if (modular_exponentiation(a, n-1, n) != 1)
            return 0; // Hợp số
    }
    
    return 1; // Có thể là nguyên tố
}

int main() {
    int n, k;
    printf("Nhap so can kiem tra: "); scanf("%d", &n);
    printf("Nhap so lan lap: "); scanf("%d", &k);
    
    if (fermat_primality_test(n, k))
        printf("%d la so nguyen to.\n", n);
    else
        printf("%d khong phai la so nguyen to.\n", n);
    
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Hàm tính a^b mod m bằng phương pháp nhanh chóng
int modularExponentiation(int a, int b, int m) {
    int result = 1;
    a = a % m;

    while (b > 0) {
        if (b % 2 == 1) {
            result = (result * a) % m;
        }
        b = b >> 1;
        a = (a * a) % m;
    }
    return result;
}
// Kiểm tra xem n có phải là số nguyên tố hay không dựa trên thuật toán Fermat
int isPrimeFermat(int n, int t) {
    if (n < 3 || n % 2 == 0) {
        printf("\nSo n phai la so le va lon hon hoac bang 3. Xin moi nhap lai!\n");
        return 0;
    }

    srand(time(NULL)); // Khởi tạo seed cho hàm rand()

    for (int i = 1; i <= t; i++) {
        printf("\n----------------\nLan lap %d", i);
        
        int a = 0;
        while (a < 2 || a >= n - 2) {
            a = rand() % n;
        }
        printf("\n ran = %d", a);

        // Tính r = a^(n-1) mod n
        int r = modularExponentiation(a, n - 1, n);

        printf("\nr = %d", r);

        if (r != 1) {
            printf("\n%d la hop so", n);
            return 0; // Không phải số nguyên tố
        }
    }

    printf("\n%d la so nguyen to", n);
    return 1; // Là số nguyên tố
}



int main() {
    int n, t;
    printf("\nNhap n: ");
    scanf("%d", &n);

    printf("\nNhap so lan lap: ");
    scanf("%d", &t);

    while (!isPrimeFermat(n, t)) {
        printf("\nNhap lai n: ");
        scanf("%d", &n);
    }

    return 0;
}
