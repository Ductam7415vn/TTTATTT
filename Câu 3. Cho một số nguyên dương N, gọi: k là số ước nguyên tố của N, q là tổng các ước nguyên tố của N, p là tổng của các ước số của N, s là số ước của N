Câu 3. Cho một số nguyên dương N, gọi:
- k là số ước nguyên tố của N;
- q là tổng của các ước nguyên tố của N;
- p là tổng của các ước số của N;
- s là số ước của N;

#include <stdio.h>
#include <math.h>

// Hàm kiểm tra một số có phải là số nguyên tố hay không
int is_prime(int num) {
    if (num <= 1) return 0; // Số nhỏ hơn hoặc bằng 1 không phải là số nguyên tố
    if (num == 2) return 1; // Số 2 là số nguyên tố
    if (num % 2 == 0) return 0; // Các số chẵn lớn hơn 2 không phải là số nguyên tố
    for (int i = 3; i <= sqrt(num); i += 2) {
        if (num % i == 0) return 0; // Nếu num chia hết cho i thì không phải là số nguyên tố
    }
    return 1; // num là số nguyên tố
}

// Hàm tính số ước và tổng các ước của một số
void calculate_divisors(int n, int *s, int *p) {
    *s = 0; // Khởi tạo số lượng ước số
    *p = 0; // Khởi tạo tổng các ước số
    for (int i = 1; i <= n; i++) {
        if (n % i == 0) {
            (*s)++; // Tăng số lượng ước số
            (*p) += i; // Cộng ước số vào tổng
        }
    }
}

// Hàm tính số ước nguyên tố và tổng các ước nguyên tố của một số
void calculate_prime_divisors(int n, int *k, int *q) {
    *k = 0; // Khởi tạo số lượng ước nguyên tố
    *q = 0; // Khởi tạo tổng các ước nguyên tố
    for (int i = 2; i <= n; i++) {
        if (n % i == 0 && is_prime(i)) {
            (*k)++; // Tăng số lượng ước nguyên tố
            (*q) += i; // Cộng ước nguyên tố vào tổng
        }
    }
}

int main() {
    int N;
    int s, p, q, k;
    
    // Nhập giá trị của N từ bàn phím
    printf("Nhập một số nguyên dương N: ");
    scanf("%d", &N);
    
    // Tính số ước và tổng các ước của N
    calculate_divisors(N, &s, &p);
    
    // Tính số ước nguyên tố và tổng các ước nguyên tố của N
    calculate_prime_divisors(N, &k, &q);
    
    // Tính giá trị của N + p + s - q - k
    int result = N + p + s - q - k;
    
    // In kết quả ra màn hình
    printf("Giá trị của N + p + s - q - k là: %d\n", result);
    
    return 0;
}
